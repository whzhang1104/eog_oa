{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/Features/Weather/Weather.tsx\",\n    _templateObject,\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ApolloClient, ApolloProvider, useQuery, gql, InMemoryCache } from '@apollo/client';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Typography } from '@material-ui/core';\nimport Chip from '../../components/Chip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar client = new ApolloClient({\n  uri: 'https://react.eogresources.com/graphql',\n  cache: new InMemoryCache()\n});\n\nvar toF = function toF(c) {\n  return c * 9 / 5 + 32;\n};\n\nvar query = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query ($latLong: WeatherQuery!) {\\n    getWeatherForLocation(latLong: $latLong) {\\n      description\\n      locationName\\n      temperatureinCelsius\\n    }\\n  }\\n\"])));\n\nvar Weather = function Weather() {\n  _s();\n\n  var getLocation = useGeolocation(); // Default to houston\n\n  var latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698\n  };\n\n  var _useQuery = useQuery(query, {\n    variables: {\n      latLong: latLong\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, _this);\n  if (error) return /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, _this);\n  if (!data) return /*#__PURE__*/_jsxDEV(Chip, {\n    label: \"Weather not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 21\n  }, _this);\n  var _data$getWeatherForLo = data.getWeatherForLocation,\n      locationName = _data$getWeatherForLo.locationName,\n      description = _data$getWeatherForLo.description,\n      temperatureinCelsius = _data$getWeatherForLo.temperatureinCelsius;\n  return /*#__PURE__*/_jsxDEV(Chip, {\n    label: \"Weather in \".concat(locationName, \": \").concat(description, \" and \").concat(Math.round(toF(temperatureinCelsius)), \"\\xB0\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Weather, \"JF8PVZLcGB6wUjdCn8U2WatBqSI=\", false, function () {\n  return [useGeolocation, useQuery];\n});\n\n_c = Weather;\nexport default (function () {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Weather, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }, _this);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/Features/Weather/Weather.tsx"],"names":["React","ApolloClient","ApolloProvider","useQuery","gql","InMemoryCache","useGeolocation","LinearProgress","Typography","Chip","client","uri","cache","toF","c","query","Weather","getLocation","latLong","latitude","longitude","variables","loading","error","data","getWeatherForLocation","locationName","description","temperatureinCelsius","Math","round"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,GAJF,EAKEC,aALF,QAMO,gBANP;AAOA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,IAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,EAAAA,GAAG,EAAE,wCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,IAAMQ,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD;AAAA,SAAgBA,CAAC,GAAG,CAAL,GAAU,CAAV,GAAc,EAA7B;AAAA,CAAZ;;AAEA,IAAMC,KAAK,GAAGX,GAAH,2OAAX;;AAmBA,IAAMY,OAAW,GAAG,SAAdA,OAAc,GAAM;AAAA;;AACxB,MAAMC,WAAW,GAAGX,cAAc,EAAlC,CADwB,CAExB;;AACA,MAAMY,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEF,WAAW,CAACE,QAAZ,IAAwB,OADpB;AAEdC,IAAAA,SAAS,EAAEH,WAAW,CAACG,SAAZ,IAAyB,CAAC;AAFvB,GAAhB;;AAIA,kBAAiCjB,QAAQ,CAAsBY,KAAtB,EAA6B;AACpEM,IAAAA,SAAS,EAAE;AACTH,MAAAA,OAAO,EAAPA;AADS;AADyD,GAA7B,CAAzC;AAAA,MAAQI,OAAR,aAAQA,OAAR;AAAA,MAAiBC,KAAjB,aAAiBA,KAAjB;AAAA,MAAwBC,IAAxB,aAAwBA,IAAxB;;AAMA,MAAIF,OAAJ,EAAa,oBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,WAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO,QAAC,UAAD;AAAY,IAAA,KAAK,EAAC,OAAlB;AAAA,cAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,WAAP;AACX,MAAI,CAACC,IAAL,EAAW,oBAAO,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,WAAP;AACX,8BAA4DA,IAAI,CAACC,qBAAjE;AAAA,MAAQC,YAAR,yBAAQA,YAAR;AAAA,MAAsBC,WAAtB,yBAAsBA,WAAtB;AAAA,MAAmCC,oBAAnC,yBAAmCA,oBAAnC;AAEA,sBAAO,QAAC,IAAD;AAAM,IAAA,KAAK,uBAAgBF,YAAhB,eAAiCC,WAAjC,kBAAoDE,IAAI,CAACC,KAAL,CAAWjB,GAAG,CAACe,oBAAD,CAAd,CAApD;AAAX;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAnBD;;GAAMZ,O;UACgBV,c,EAMaH,Q;;;KAP7Ba,O;AAqBN,gBAAe;AAAA,sBACb,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA,2BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADa;AAAA,CAAf","sourcesContent":["import React, { FC } from 'react';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  useQuery,\n  gql,\n  InMemoryCache,\n} from '@apollo/client';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Typography } from '@material-ui/core';\nimport Chip from '../../components/Chip';\n\nconst client = new ApolloClient({\n  uri: 'https://react.eogresources.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst query = gql`\n  query ($latLong: WeatherQuery!) {\n    getWeatherForLocation(latLong: $latLong) {\n      description\n      locationName\n      temperatureinCelsius\n    }\n  }\n`;\n\ntype WeatherData = {\n  temperatureinCelsius: number;\n  description: string;\n  locationName: string;\n};\ntype WeatherDataResponse = {\n  getWeatherForLocation: WeatherData;\n};\n\nconst Weather: FC = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const { loading, error, data } = useQuery<WeatherDataResponse>(query, {\n    variables: {\n      latLong,\n    },\n  });\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Typography color=\"error\">{error}</Typography>;\n  if (!data) return <Chip label=\"Weather not found\" />;\n  const { locationName, description, temperatureinCelsius } = data.getWeatherForLocation;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${Math.round(toF(temperatureinCelsius))}Â°`} />;\n};\n\nexport default () => (\n  <ApolloProvider client={client}>\n    <Weather />\n  </ApolloProvider>\n);\n"]},"metadata":{},"sourceType":"module"}