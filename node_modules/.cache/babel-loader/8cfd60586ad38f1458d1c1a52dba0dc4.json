{"ast":null,"code":"import _objectSpread from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from 'redux-starter-kit';\nvar initialState = {\n  selectedMetrics: [],\n  metrics: {},\n  latestValue: {}\n};\nvar slice = createSlice({\n  initialState: initialState,\n  name: 'metricsReducer',\n  reducers: {\n    singleMetricsDataReceived: function singleMetricsDataReceived(state, action) {\n      var _action$payload = action.payload,\n          metrics = _action$payload.metrics,\n          latestValue = _action$payload.latestValue;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        metrics: metrics,\n        latestValue: latestValue\n      });\n    },\n    multipleMetricsDataReceived: function multipleMetricsDataReceived(state, action) {\n      var metrics = action.payload.metrics;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        metrics: metrics\n      });\n    },\n    metricNamesSelected: function metricNamesSelected(state, action) {\n      var selectedMetrics = action.payload.selectedMetrics;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedMetrics: selectedMetrics\n      });\n    },\n    startLiveUpdates: function startLiveUpdates(state, action) {\n      return state;\n    },\n    fetchedLastHalfHour: function fetchedLastHalfHour(state, action) {\n      return state;\n    },\n    fetchedSingleMetric: function fetchedSingleMetric(state, action) {\n      return state;\n    }\n  }\n});\nvar reducer = slice.reducer,\n    actions = slice.actions;\nexport { reducer, actions };","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/Features/Metrics/reducer.ts"],"names":["createSlice","initialState","selectedMetrics","metrics","latestValue","slice","name","reducers","singleMetricsDataReceived","state","action","payload","multipleMetricsDataReceived","metricNamesSelected","startLiveUpdates","fetchedLastHalfHour","fetchedSingleMetric","reducer","actions"],"mappings":";AAAA,SAASA,WAAT,QAA2C,mBAA3C;AAsCA,IAAMC,YAAyB,GAAG;AAC9BC,EAAAA,eAAe,EAAE,EADa;AAE9BC,EAAAA,OAAO,EAAE,EAFqB;AAG9BC,EAAAA,WAAW,EAAE;AAHiB,CAAlC;AAMA,IAAMC,KAAK,GAAGL,WAAW,CAAC;AACtBC,EAAAA,YAAY,EAAZA,YADsB;AAEtBK,EAAAA,IAAI,EAAE,gBAFgB;AAGtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,yBAAyB,EAAE,mCAACC,KAAD,EAAQC,MAAR,EAAqD;AAC5E,4BAAiCA,MAAM,CAACC,OAAxC;AAAA,UAAQR,OAAR,mBAAQA,OAAR;AAAA,UAAiBC,WAAjB,mBAAiBA,WAAjB;AACA,6CACOK,KADP;AAEIN,QAAAA,OAAO,EAAPA,OAFJ;AAGIC,QAAAA,WAAW,EAAXA;AAHJ;AAKH,KARK;AASNQ,IAAAA,2BAA2B,EAAE,qCAACH,KAAD,EAAQC,MAAR,EAAkD;AAC3E,UAAQP,OAAR,GAAoBO,MAAM,CAACC,OAA3B,CAAQR,OAAR;AACA,6CACOM,KADP;AAEIN,QAAAA,OAAO,EAAPA;AAFJ;AAIH,KAfK;AAgBNU,IAAAA,mBAAmB,EAAE,6BAACJ,KAAD,EAAQC,MAAR,EAAuD;AACxE,UAAQR,eAAR,GAA4BQ,MAAM,CAACC,OAAnC,CAAQT,eAAR;AACA,6CACOO,KADP;AAEIP,QAAAA,eAAe,EAAfA;AAFJ;AAIH,KAtBK;AAuBNY,IAAAA,gBAAgB,EAAE,0BAACL,KAAD,EAAQC,MAAR;AAAA,aAAkCD,KAAlC;AAAA,KAvBZ;AAwBNM,IAAAA,mBAAmB,EAAE,6BAACN,KAAD,EAAQC,MAAR;AAAA,aAAmDD,KAAnD;AAAA,KAxBf;AAyBNO,IAAAA,mBAAmB,EAAE,6BAACP,KAAD,EAAQC,MAAR;AAAA,aAA2CD,KAA3C;AAAA;AAzBf;AAHY,CAAD,CAAzB;AAgCO,IAAQQ,OAAR,GAA6BZ,KAA7B,CAAQY,OAAR;AAAA,IAAiBC,OAAjB,GAA6Bb,KAA7B,CAAiBa,OAAjB","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport interface MetricsType {\n    metrics: any;\n    latestValue: {\n        [key: string]: number\n    },\n    selectedMetrics: string[];\n}\n\nexport interface MetricSelectPayload {\n    selectedMetrics: string[];\n    metricName?: string;\n}\n\nexport interface MetricsWithLatest {\n    metrics: any;\n    latestValue: {\n        [key: string]: number\n    }\n}\n\nexport interface MetricsPayload {\n    metrics: any;\n}\n\nexport interface IMetric {\n    metric: string;\n    at: string;\n    value: number;\n    unit: string;\n}\n\nexport interface FetchMetricData {\n    metricName?: string;\n    data: any;\n}\n\nconst initialState: MetricsType = {\n    selectedMetrics: [],\n    metrics: {},\n    latestValue: {},\n};\n\nconst slice = createSlice({\n    initialState,\n    name: 'metricsReducer',\n    reducers: {\n        singleMetricsDataReceived: (state, action: PayloadAction<MetricsWithLatest>) => {\n            const { metrics, latestValue } = action.payload;\n            return {\n                ...state,\n                metrics,\n                latestValue\n            }\n        },\n        multipleMetricsDataReceived: (state, action: PayloadAction<MetricsPayload>) => {\n            const { metrics } = action.payload;\n            return {\n                ...state,\n                metrics,\n            };\n        },\n        metricNamesSelected: (state, action: PayloadAction<MetricSelectPayload>) => {\n            const { selectedMetrics } = action.payload;\n            return {\n                ...state,\n                selectedMetrics\n            }\n        },\n        startLiveUpdates: (state, action: PayloadAction) => state,\n        fetchedLastHalfHour: (state, action: PayloadAction<FetchMetricData>) => state,\n        fetchedSingleMetric: (state, action: PayloadAction<IMetric>) => state\n    }\n})\n\nexport const { reducer, actions } = slice;"]},"metadata":{},"sourceType":"module"}