{"ast":null,"code":"import _slicedToArray from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/LatestValueSection.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid, CardContent, Typography, Card, CardHeader } from '@material-ui/core';\nimport { useSubscription, useQuery } from 'urql';\nimport { actions } from '../Features/Metrics/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar ValueCard = function ValueCard(_ref) {\n  _s();\n\n  var metricName = _ref.metricName,\n      currentValue = _ref.currentValue;\n\n  var _useState = useState(currentValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useQuery = useQuery({\n    query: \"query ($metricName: String!) {\\n            getLastKnownMeasurement(metricName:$metricName){\\n              metric\\n              value\\n              at\\n              unit\\n            }\\n          }\",\n    variables: {\n      metricName: metricName\n    }\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var data = result.data;\n  useEffect(function () {\n    setValue(data ? data.getLastKnownMeasurement.value : 0);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    md: 5,\n    xs: 6,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      elevation: 2,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: metricName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: currentValue ? currentValue : value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(ValueCard, \"PnPpvvv4qA45Iu2o0unIGQjZWqQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = ValueCard;\n\nvar getLatestValues = function getLatestValues(state) {\n  return state.metrics.latestValue;\n};\n\nvar LatestValueSection = function LatestValueSection(_ref2) {\n  _s2();\n\n  var selectedMetrics = _ref2.selectedMetrics;\n  var latestValue = useSelector(getLatestValues);\n  var dispatch = useDispatch();\n\n  var _useSubscription = useSubscription({\n    query: \"\\n        subscription {\\n            newMeasurement {\\n                at\\n                metric\\n                value\\n                unit\\n            }\\n        }\",\n    pause: selectedMetrics.length === 0\n  }),\n      _useSubscription2 = _slicedToArray(_useSubscription, 1),\n      result = _useSubscription2[0];\n\n  var data = result.data;\n  useEffect(function () {\n    data && dispatch(actions.fetchedSingleMetric(data.newMeasurement));\n  }, [data, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedMetrics.map(function (metric) {\n      return /*#__PURE__*/_jsxDEV(ValueCard, {\n        metricName: metric,\n        currentValue: latestValue[metric]\n      }, metric, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false);\n};\n\n_s2(LatestValueSection, \"Oq6/78S0rDZ0MFvNb/3pV+5iVtA=\", false, function () {\n  return [useSelector, useDispatch, useSubscription];\n});\n\n_c2 = LatestValueSection;\nexport default LatestValueSection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ValueCard\");\n$RefreshReg$(_c2, \"LatestValueSection\");","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/LatestValueSection.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","Grid","CardContent","Typography","Card","CardHeader","useSubscription","useQuery","actions","ValueCard","metricName","currentValue","value","setValue","query","variables","result","data","getLastKnownMeasurement","getLatestValues","state","metrics","latestValue","LatestValueSection","selectedMetrics","dispatch","pause","length","fetchedSingleMetric","newMeasurement","map","metric"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../store';\nimport { Grid, CardContent, Typography, Card, CardHeader } from '@material-ui/core';\nimport { useSubscription, useQuery } from 'urql';\nimport { actions } from '../Features/Metrics/reducer';\n\ninterface ILatestValueSectionProps {\n    selectedMetrics: string[];\n}\n\ninterface IValueCardProps {\n    metricName: string;\n    currentValue: number;\n}\n\nconst ValueCard: React.FC<IValueCardProps> = ({ metricName, currentValue }) => {\n    const [value, setValue] = useState(currentValue);\n    const [result] = useQuery({\n        query: `query ($metricName: String!) {\n            getLastKnownMeasurement(metricName:$metricName){\n              metric\n              value\n              at\n              unit\n            }\n          }`,\n        variables: {\n            metricName\n        }\n    });\n    const { data } = result;\n    useEffect(() => {\n        setValue(data ? data.getLastKnownMeasurement.value : 0)\n    }, [data])\n    return <Grid item md={5} xs={6}>\n        <Card elevation={2}>\n            <CardHeader title={metricName} />\n            <CardContent>\n                <Typography variant=\"h3\">\n                    {currentValue ? currentValue : value}\n                </Typography>\n            </CardContent>\n        </Card>\n    </Grid>\n}\n\n\nconst getLatestValues = (state: IState) => {\n    return state.metrics.latestValue;\n}\n\ninterface NewMeasurement {\n    newMeasurement: {\n        at: string;\n        metric: string;\n        value: number;\n        unit: string;\n    }\n}\n\nconst LatestValueSection: React.FC<ILatestValueSectionProps> = ({ selectedMetrics }) => {\n    const latestValue = useSelector(getLatestValues);\n    const dispatch = useDispatch();\n    const [result] = useSubscription<NewMeasurement>({\n        query: `\n        subscription {\n            newMeasurement {\n                at\n                metric\n                value\n                unit\n            }\n        }`,\n        pause: selectedMetrics.length === 0\n    })\n    const { data } = result;\n\n    useEffect(() => {\n        data && dispatch(actions.fetchedSingleMetric(data.newMeasurement))\n    }, [data, dispatch])\n\n    return <>\n        {\n            selectedMetrics.map((metric) => (\n                <ValueCard key={metric}\n                    metricName={metric}\n                    currentValue={latestValue[metric]}\n                />\n            ))\n        }\n    </>\n}\n\nexport default LatestValueSection"]},"metadata":{},"sourceType":"module"}