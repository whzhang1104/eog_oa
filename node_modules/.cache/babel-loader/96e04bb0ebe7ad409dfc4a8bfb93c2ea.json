{"ast":null,"code":"import _slicedToArray from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/LatestValueSection.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid, CardContent, Typography, Card, CardHeader } from '@material-ui/core';\nimport { useSubscription, useQuery } from 'urql';\nimport { actions } from '../Features/Metrics/reducer';\n\nvar ValueCard = function ValueCard(_ref) {\n  var metricName = _ref.metricName,\n      currentValue = _ref.currentValue;\n\n  var _useState = useState(currentValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useQuery = useQuery({\n    query: \"query ($metricName: String!) {\\n            getLastKnownMeasurement(metricName:$metricName){\\n              metric\\n              value\\n              at\\n              unit\\n            }\\n          }\",\n    variables: {\n      metricName: metricName\n    }\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var data = result.data;\n  useEffect(function () {\n    setValue(data ? data.getLastKnownMeasurement.value : 0);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 5,\n    xs: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    elevation: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: metricName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, currentValue ? currentValue : value))));\n};\n\nvar getLatestValues = function getLatestValues(state) {\n  return state.metrics.latestValue;\n};\n\nvar LatestValueSection = function LatestValueSection(_ref2) {\n  var selectedMetrics = _ref2.selectedMetrics;\n  var latestValue = useSelector(getLatestValues);\n  var dispatch = useDispatch();\n\n  var _useSubscription = useSubscription({\n    query: \"\\n        subscription {\\n            newMeasurement {\\n                at\\n                metric\\n                value\\n                unit\\n            }\\n        }\",\n    pause: selectedMetrics.length === 0\n  }),\n      _useSubscription2 = _slicedToArray(_useSubscription, 1),\n      result = _useSubscription2[0];\n\n  var data = result.data;\n  useEffect(function () {\n    data && dispatch(actions.fetchedSingleMetric(data.newMeasurement));\n  }, [data, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, selectedMetrics.map(function (metric) {\n    return /*#__PURE__*/React.createElement(ValueCard, {\n      key: metric,\n      metricName: metric,\n      currentValue: latestValue[metric],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    });\n  }));\n};\n\nexport default LatestValueSection;","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/LatestValueSection.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","Grid","CardContent","Typography","Card","CardHeader","useSubscription","useQuery","actions","ValueCard","metricName","currentValue","value","setValue","query","variables","result","data","getLastKnownMeasurement","getLatestValues","state","metrics","latestValue","LatestValueSection","selectedMetrics","dispatch","pause","length","fetchedSingleMetric","newMeasurement","map","metric"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../store';\nimport { Grid, CardContent, Typography, Card, CardHeader } from '@material-ui/core';\nimport { useSubscription, useQuery } from 'urql';\nimport { actions } from '../Features/Metrics/reducer';\n\ninterface ILatestValueSectionProps {\n    selectedMetrics: string[];\n}\n\ninterface IValueCardProps {\n    metricName: string;\n    currentValue: number;\n}\n\nconst ValueCard: React.FC<IValueCardProps> = ({ metricName, currentValue }) => {\n    const [value, setValue] = useState(currentValue);\n    const [result] = useQuery({\n        query: `query ($metricName: String!) {\n            getLastKnownMeasurement(metricName:$metricName){\n              metric\n              value\n              at\n              unit\n            }\n          }`,\n        variables: {\n            metricName\n        }\n    });\n    const { data } = result;\n    useEffect(() => {\n        setValue(data ? data.getLastKnownMeasurement.value : 0)\n    }, [data])\n    return <Grid item md={5} xs={6}>\n        <Card elevation={2}>\n            <CardHeader title={metricName} />\n            <CardContent>\n                <Typography variant=\"h3\">\n                    {currentValue ? currentValue : value}\n                </Typography>\n            </CardContent>\n        </Card>\n    </Grid>\n}\n\n\nconst getLatestValues = (state: IState) => {\n    return state.metrics.latestValue;\n}\n\ninterface NewMeasurement {\n    newMeasurement: {\n        at: string;\n        metric: string;\n        value: number;\n        unit: string;\n    }\n}\n\nconst LatestValueSection: React.FC<ILatestValueSectionProps> = ({ selectedMetrics }) => {\n    const latestValue = useSelector(getLatestValues);\n    const dispatch = useDispatch();\n    const [result] = useSubscription<NewMeasurement>({\n        query: `\n        subscription {\n            newMeasurement {\n                at\n                metric\n                value\n                unit\n            }\n        }`,\n        pause: selectedMetrics.length === 0\n    })\n    const { data } = result;\n\n    useEffect(() => {\n        data && dispatch(actions.fetchedSingleMetric(data.newMeasurement))\n    }, [data, dispatch])\n\n    return <>\n        {\n            selectedMetrics.map((metric) => (\n                <ValueCard key={metric}\n                    metricName={metric}\n                    currentValue={latestValue[metric]}\n                />\n            ))\n        }\n    </>\n}\n\nexport default LatestValueSection"]},"metadata":{},"sourceType":"module"}