{"ast":null,"code":"var _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/ChartGraph.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport { red, green, indigo, pink, blue, yellow } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar unitAdder = function unitAdder(value) {\n  if (value >= 1000) {\n    return (value / 1000).toString() + 'K';\n  } else {\n    return value.toString();\n  }\n};\n\nvar getAxisID = function getAxisID(metric) {\n  return metric.toLowerCase().endsWith('pressure') ? 1 : metric.toLowerCase().endsWith('temp') ? 2 : 0;\n};\n\nvar getMetrics = function getMetrics(state) {\n  var metrics = state.metrics.metrics;\n  return metrics;\n};\n\nvar lineColors = [red[600], pink[500], blue[500], yellow[500], indigo[400], green[500]];\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      width: '100vw',\n      height: '100vh'\n    },\n    main: {\n      padding: theme.spacing(3),\n      background: 'white'\n    }\n  };\n});\n\nvar ChartGraph = function ChartGraph(_ref) {\n  _s();\n\n  var selectedMetrics = _ref.selectedMetrics;\n  var metrics = useSelector(getMetrics);\n  var classes = useStyles();\n  var data = Object.keys(metrics).map(function (key) {\n    return metrics[key];\n  });\n  var units = {\n    percentage: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 0;\n    }),\n    pressure: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 1;\n    }),\n    temperature: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 2;\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 600,\n        height: 600,\n        data: data,\n        children: [selectedMetrics.map(function (metric, index) {\n          return /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: getAxisID(metric),\n            dataKey: metric,\n            stroke: lineColors[index],\n            dot: true,\n            activeDot: true\n          }, metric, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 32\n          }, _this);\n        }), selectedMetrics.length > 0 && /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"at\",\n          interval: 150\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, _this), units.temperature && /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'F',\n            position: 'insideTopLeft',\n            offset: 0,\n            fill: '#908e8e',\n            fontSize: 12,\n            dy: 10,\n            dx: 10,\n            angle: -90\n          },\n          yAxisId: 2,\n          orientation: \"left\",\n          stroke: '#908e8f',\n          tick: {\n            fontSize: 11\n          },\n          tickFormatter: unitAdder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, _this), units.percentage && /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: '%',\n            position: 'insideTopLeft',\n            offset: 0,\n            fill: '#908e8e',\n            dy: 10,\n            dx: 10,\n            angle: -90\n          },\n          yAxisId: 0,\n          orientation: \"left\",\n          stroke: '#908e95',\n          domain: [0, 100],\n          ticks: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n          tick: {\n            fontSize: 11\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, _this), units.pressure && /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'PSI',\n            position: 'insideTopLeft',\n            offset: 0,\n            fill: '#908e8e',\n            fontSize: 12,\n            dy: 15,\n            dx: 10,\n            angle: -90\n          },\n          yAxisId: 1,\n          orientation: \"left\",\n          stroke: '#908e8f',\n          tick: {\n            fontSize: 11\n          },\n          tickFormatter: unitAdder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(ChartGraph, \"2d8WSjMXBD3e90603OHadb48CP0=\", false, function () {\n  return [useSelector, useStyles];\n});\n\n_c = ChartGraph;\nexport default ChartGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartGraph\");","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/ChartGraph.tsx"],"names":["React","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","red","green","indigo","pink","blue","yellow","useSelector","makeStyles","unitAdder","value","toString","getAxisID","metric","toLowerCase","endsWith","getMetrics","state","metrics","lineColors","useStyles","theme","container","width","height","main","padding","spacing","background","ChartGraph","selectedMetrics","classes","data","Object","keys","map","key","units","percentage","some","m","pressure","temperature","index","length","position","offset","fill","fontSize","dy","dx","angle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts'\nimport { red, green, indigo, pink, blue, yellow } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux'\nimport { IState } from '../store';\nimport { makeStyles } from '@material-ui/core';\n\n\nconst unitAdder = (value: number): string => {\n    if (value >= 1000) {\n        return (value / 1000).toString() + 'K';\n    } else {\n        return value.toString();\n    }\n}\n\nconst getAxisID = (metric: string) => metric.toLowerCase().endsWith('pressure') ? 1 : (metric.toLowerCase().endsWith('temp') ? 2 : 0);\n\nconst getMetrics = (state: IState) => {\n    const { metrics } = state.metrics;\n    return metrics;\n}\n\nconst lineColors = [red[600], pink[500], blue[500], yellow[500], indigo[400], green[500]]\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        width: '100vw',\n        height: '100vh',\n    },\n    main: {\n        padding: theme.spacing(3),\n        background: 'white'\n    },\n}));\n\ninterface IChartProps {\n    selectedMetrics: string[];\n}\n\nconst ChartGraph: React.FC<IChartProps> = ({ selectedMetrics }) => {\n    const metrics = useSelector(getMetrics);\n    const classes = useStyles();\n    const data = Object.keys(metrics).map(key => metrics[key])\n\n    const units = {\n        percentage: selectedMetrics.some((m: string) => getAxisID(m) === 0),\n        pressure: selectedMetrics.some((m: string) => getAxisID(m) === 1),\n        temperature: selectedMetrics.some((m: string) => getAxisID(m) === 2)\n    }\n\n    return <div className={classes.container}>\n        <ResponsiveContainer>\n            <LineChart\n                width={600}\n                height={600}\n                data={data}\n            >\n                {\n                    selectedMetrics.map((metric, index) => {\n                        return <Line\n                            key={metric}\n                            yAxisId={getAxisID(metric)}\n                            dataKey={metric}\n                            stroke={lineColors[index]}\n                            dot\n                            activeDot\n                        />\n                    })\n                }\n                {\n                    selectedMetrics.length > 0 &&\n                    <XAxis dataKey=\"at\" interval={150} />\n                }\n                {\n                    units.temperature &&\n                    <YAxis\n                        label={{ value: 'F', position: 'insideTopLeft', offset: 0, fill: '#908e8e', fontSize: 12, dy: 10, dx: 10, angle: -90 }}\n                        yAxisId={2}\n                        orientation=\"left\"\n                        stroke={'#908e8f'}\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={unitAdder}\n                    />\n                }\n                {\n                    units.percentage &&\n                    <YAxis\n                        label={{ value: '%', position: 'insideTopLeft', offset: 0, fill: '#908e8e', dy: 10, dx: 10, angle: -90 }}\n                        yAxisId={0}\n                        orientation=\"left\"\n                        stroke={'#908e95'}\n                        domain={[0, 100]}\n                        ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\n                        tick={{ fontSize: 11 }}\n                    />\n                }\n                {\n                    units.pressure &&\n                    <YAxis\n                        label={{ value: 'PSI', position: 'insideTopLeft', offset: 0, fill: '#908e8e', fontSize: 12, dy: 15, dx: 10, angle: -90 }}\n                        yAxisId={1}\n                        orientation=\"left\"\n                        stroke={'#908e8f'}\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={unitAdder}\n                    />\n                }\n                <Tooltip />\n            </LineChart>\n        </ResponsiveContainer>\n        </div>\n}\n\nexport default ChartGraph"]},"metadata":{},"sourceType":"module"}