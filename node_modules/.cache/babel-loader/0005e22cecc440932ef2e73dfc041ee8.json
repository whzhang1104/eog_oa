{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(normalizeData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(combine),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchLast30MinsData),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchForFetch),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchForLiveUpdates);\n\nimport { takeEvery, put, fork, select } from 'redux-saga/effects';\nimport { actions } from './reducer';\nimport { client } from './Metrics';\n\nvar getMetrics = function getMetrics(state) {\n  return state.metrics.metrics;\n};\n\nfunction normalizeData(action) {\n  var _objectSpread2;\n\n  var _action$payload, metric, at, value, getLatestvalue, data, oldlatestValue, hours, minutes, timeAt, latestValue;\n\n  return _regeneratorRuntime.wrap(function normalizeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _action$payload = action.payload, metric = _action$payload.metric, at = _action$payload.at, value = _action$payload.value;\n\n          getLatestvalue = function getLatestvalue(state) {\n            return state.metrics.latestValue;\n          };\n\n          _context.next = 4;\n          return select(getMetrics);\n\n        case 4:\n          data = _context.sent;\n          _context.next = 7;\n          return select(getLatestvalue);\n\n        case 7:\n          oldlatestValue = _context.sent;\n          hours = new Date(at).getHours() % 12 || 12;\n          minutes = new Date(at).getMinutes();\n          timeAt = \"\".concat((\"0\" + hours).slice(-2), \":\").concat((\"0\" + minutes).slice(-2));\n          data = _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, at, _objectSpread(_objectSpread({}, data[at]), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, metric, value), _defineProperty(_objectSpread2, \"at\", timeAt), _objectSpread2))));\n          latestValue = _objectSpread(_objectSpread({}, oldlatestValue), {}, _defineProperty({}, metric, value));\n          _context.next = 15;\n          return put({\n            type: actions.singleMetricsDataReceived.type,\n            metrics: data,\n            latestValue: latestValue\n          });\n\n        case 15:\n          _context.next = 17;\n          return put(actions.singleMetricsDataReceived({\n            metrics: data,\n            latestValue: latestValue\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction combine(list) {\n  var data;\n  return _regeneratorRuntime.wrap(function combine$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getMetrics);\n\n        case 2:\n          data = _context2.sent;\n          list.map(function (item) {\n            var _objectSpread5;\n\n            var metric = item.metric,\n                at = item.at,\n                value = item.value;\n            var hours = new Date(at).getHours() % 12 || 12;\n            var minutes = new Date(at).getMinutes();\n            var timeAt = \"\".concat((\"0\" + hours).slice(-2), \":\").concat((\"0\" + minutes).slice(-2));\n            data = _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, at, _objectSpread(_objectSpread({}, data[at]), {}, (_objectSpread5 = {}, _defineProperty(_objectSpread5, metric, value), _defineProperty(_objectSpread5, \"at\", timeAt), _objectSpread5))));\n            return null;\n          });\n          _context2.next = 6;\n          return put(actions.multipleMetricsDataReceived({\n            metrics: data\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction fetchLast30MinsData(action) {\n  var metricName, thirtyMinAgo, _yield$client$query$t, data;\n\n  return _regeneratorRuntime.wrap(function fetchLast30MinsData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          metricName = action.payload.metricName;\n          thirtyMinAgo = new Date(new Date().getTime() - 30 * 60000).getTime();\n          _context3.next = 4;\n          return client.query(\"\\n    query($metricName: String!, $after: Timestamp) {\\n        getMeasurements(input: { metricName: $metricName, after: $after }) {\\n            at\\n            metric\\n            value\\n            unit\\n        }\\n    }\", {\n            metricName: metricName,\n            after: thirtyMinAgo\n          }).toPromise();\n\n        case 4:\n          _yield$client$query$t = _context3.sent;\n          data = _yield$client$query$t.data;\n          _context3.next = 8;\n          return fork(combine, data.getMeasurements);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport function watchForFetch() {\n  return _regeneratorRuntime.wrap(function watchForFetch$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.fetchedLastHalfHour.type, fetchLast30MinsData);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(actions.fetchedSingleMetric.type, normalizeData);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function watchForLiveUpdates() {\n  return _regeneratorRuntime.wrap(function watchForLiveUpdates$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(actions.metricNamesSelected.type, fetchLast30MinsData);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/Features/Metrics/saga.ts"],"names":["normalizeData","combine","fetchLast30MinsData","watchForFetch","watchForLiveUpdates","takeEvery","put","fork","select","actions","client","getMetrics","state","metrics","action","payload","metric","at","value","getLatestvalue","latestValue","data","oldlatestValue","hours","Date","getHours","minutes","getMinutes","timeAt","slice","type","singleMetricsDataReceived","list","map","item","multipleMetricsDataReceived","metricName","thirtyMinAgo","getTime","query","after","toPromise","getMeasurements","fetchedLastHalfHour","fetchedSingleMetric","metricNamesSelected"],"mappings":"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","sourcesContent":["import { takeEvery, put, fork, select } from 'redux-saga/effects'\nimport { actions, FetchMetricData, IMetric } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { IState } from '../../store';\nimport { client } from './Metrics';\n\nconst getMetrics = (state: IState) => state.metrics.metrics;\n\nfunction* normalizeData(action: PayloadAction<IMetric>) {\n    const { metric, at, value } = action.payload;\n    const getLatestvalue = (state: IState) => state.metrics.latestValue;\n    let data = yield select(getMetrics);\n    const oldlatestValue = yield select(getLatestvalue)\n    const hours = new Date(at).getHours() % 12 || 12;\n    const minutes = new Date(at).getMinutes()\n    const timeAt = `${(\"0\" + hours).slice(-2)}:${(\"0\" + minutes).slice(-2)}`\n    data = {\n        ...data,\n        [at]: {\n            ...data[at],\n            [metric]: value,\n            at: timeAt,\n        },\n    };\n    const latestValue = {\n        ...oldlatestValue,\n        [metric]: value\n    }\n    yield put({ type: actions.singleMetricsDataReceived.type, metrics: data, latestValue })\n    yield put(actions.singleMetricsDataReceived({ metrics: data, latestValue }))\n}\n\nfunction* combine(list: IMetric[]) {\n    let data = yield select(getMetrics);\n    list.map(item => {\n        const { metric, at, value } = item;\n        const hours = new Date(at).getHours() % 12 || 12;\n        const minutes = new Date(at).getMinutes()\n        const timeAt = `${(\"0\" + hours).slice(-2)}:${(\"0\" + minutes).slice(-2)}`\n        data = {\n            ...data,\n            [at]: {\n                ...data[at],\n                [metric]: value,\n                at: timeAt,\n            },\n        }\n        return null;\n    })\n    yield put(actions.multipleMetricsDataReceived({ metrics: data }))\n}\n\nfunction* fetchLast30MinsData(action: PayloadAction<FetchMetricData>) {\n    const { metricName } = action.payload;\n    const thirtyMinAgo = new Date(new Date().getTime() - 30 * 60000).getTime()\n    const { data } = yield client.query(`\n    query($metricName: String!, $after: Timestamp) {\n        getMeasurements(input: { metricName: $metricName, after: $after }) {\n            at\n            metric\n            value\n            unit\n        }\n    }`, {\n        metricName,\n        after: thirtyMinAgo\n    }).toPromise();\n    yield fork(combine, data.getMeasurements)\n}\n\nexport function* watchForFetch() {\n    yield takeEvery(actions.fetchedLastHalfHour.type, fetchLast30MinsData);\n    yield takeEvery(actions.fetchedSingleMetric.type, normalizeData);\n}\n\nexport function* watchForLiveUpdates() {\n    yield takeEvery(actions.metricNamesSelected.type, fetchLast30MinsData);\n}\n"]},"metadata":{},"sourceType":"module"}