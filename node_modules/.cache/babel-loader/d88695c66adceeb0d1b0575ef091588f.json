{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/ChartGraph.tsx\";\n\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport { red, green, indigo, pink, blue, yellow } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\n\nvar unitAdder = function unitAdder(value) {\n  if (value >= 1000) {\n    return (value / 1000).toString() + 'K';\n  } else {\n    return value.toString();\n  }\n};\n\nvar getAxisID = function getAxisID(metric) {\n  return metric.toLowerCase().endsWith('pressure') ? 1 : metric.toLowerCase().endsWith('temp') ? 2 : 0;\n};\n\nvar getMetrics = function getMetrics(state) {\n  var metrics = state.metrics.metrics;\n  return metrics;\n};\n\nvar lineColors = [red[600], pink[500], blue[500], yellow[500], indigo[400], green[500]];\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      width: '100vw',\n      height: '100vh'\n    },\n    main: {\n      padding: theme.spacing(3),\n      background: 'white'\n    }\n  };\n});\n\nvar ChartGraph = function ChartGraph(_ref) {\n  var selectedMetrics = _ref.selectedMetrics;\n  var metrics = useSelector(getMetrics);\n  var classes = useStyles();\n  var data = Object.keys(metrics).map(function (key) {\n    return metrics[key];\n  });\n  var units = {\n    percentage: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 0;\n    }),\n    pressure: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 1;\n    }),\n    temperature: selectedMetrics.some(function (m) {\n      return getAxisID(m) === 2;\n    })\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 600,\n    data: data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, selectedMetrics.map(function (metric, index) {\n    return /*#__PURE__*/React.createElement(Line, {\n      key: metric,\n      yAxisId: getAxisID(metric),\n      dataKey: metric,\n      stroke: lineColors[index],\n      dot: true,\n      activeDot: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 32\n      }\n    });\n  }), selectedMetrics.length > 0 && /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"at\",\n    interval: 150,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), units.temperature && /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: 'F',\n      position: 'insideTopLeft',\n      offset: 0,\n      fill: '#908e8e',\n      fontSize: 12,\n      dy: 10,\n      dx: 10,\n      angle: -90\n    },\n    yAxisId: 2,\n    orientation: \"left\",\n    stroke: '#908e8f',\n    tick: {\n      fontSize: 11\n    },\n    tickFormatter: unitAdder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }), units.percentage && /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: '%',\n      position: 'insideTopLeft',\n      offset: 0,\n      fill: '#908e8e',\n      dy: 10,\n      dx: 10,\n      angle: -90\n    },\n    yAxisId: 0,\n    orientation: \"left\",\n    stroke: '#908e95',\n    domain: [0, 100],\n    ticks: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n    tick: {\n      fontSize: 11\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), units.pressure && /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: 'PSI',\n      position: 'insideTopLeft',\n      offset: 0,\n      fill: '#908e8e',\n      fontSize: 12,\n      dy: 15,\n      dx: 10,\n      angle: -90\n    },\n    yAxisId: 1,\n    orientation: \"left\",\n    stroke: '#908e8f',\n    tick: {\n      fontSize: 11\n    },\n    tickFormatter: unitAdder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default ChartGraph;","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/ChartGraph.tsx"],"names":["React","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","red","green","indigo","pink","blue","yellow","useSelector","makeStyles","unitAdder","value","toString","getAxisID","metric","toLowerCase","endsWith","getMetrics","state","metrics","lineColors","useStyles","theme","container","width","height","main","padding","spacing","background","ChartGraph","selectedMetrics","classes","data","Object","keys","map","key","units","percentage","some","m","pressure","temperature","index","length","position","offset","fill","fontSize","dy","dx","angle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts'\nimport { red, green, indigo, pink, blue, yellow } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux'\nimport { IState } from '../store';\nimport { makeStyles } from '@material-ui/core';\n\n\nconst unitAdder = (value: number): string => {\n    if (value >= 1000) {\n        return (value / 1000).toString() + 'K';\n    } else {\n        return value.toString();\n    }\n}\n\nconst getAxisID = (metric: string) => metric.toLowerCase().endsWith('pressure') ? 1 : (metric.toLowerCase().endsWith('temp') ? 2 : 0);\n\nconst getMetrics = (state: IState) => {\n    const { metrics } = state.metrics;\n    return metrics;\n}\n\nconst lineColors = [red[600], pink[500], blue[500], yellow[500], indigo[400], green[500]]\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        width: '100vw',\n        height: '100vh',\n    },\n    main: {\n        padding: theme.spacing(3),\n        background: 'white'\n    },\n}));\n\ninterface IChartProps {\n    selectedMetrics: string[];\n}\n\nconst ChartGraph: React.FC<IChartProps> = ({ selectedMetrics }) => {\n    const metrics = useSelector(getMetrics);\n    const classes = useStyles();\n    const data = Object.keys(metrics).map(key => metrics[key])\n\n    const units = {\n        percentage: selectedMetrics.some((m: string) => getAxisID(m) === 0),\n        pressure: selectedMetrics.some((m: string) => getAxisID(m) === 1),\n        temperature: selectedMetrics.some((m: string) => getAxisID(m) === 2)\n    }\n\n    return <div className={classes.container}>\n        <ResponsiveContainer>\n            <LineChart\n                width={600}\n                height={600}\n                data={data}\n            >\n                {\n                    selectedMetrics.map((metric, index) => {\n                        return <Line\n                            key={metric}\n                            yAxisId={getAxisID(metric)}\n                            dataKey={metric}\n                            stroke={lineColors[index]}\n                            dot\n                            activeDot\n                        />\n                    })\n                }\n                {\n                    selectedMetrics.length > 0 &&\n                    <XAxis dataKey=\"at\" interval={150} />\n                }\n                {\n                    units.temperature &&\n                    <YAxis\n                        label={{ value: 'F', position: 'insideTopLeft', offset: 0, fill: '#908e8e', fontSize: 12, dy: 10, dx: 10, angle: -90 }}\n                        yAxisId={2}\n                        orientation=\"left\"\n                        stroke={'#908e8f'}\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={unitAdder}\n                    />\n                }\n                {\n                    units.percentage &&\n                    <YAxis\n                        label={{ value: '%', position: 'insideTopLeft', offset: 0, fill: '#908e8e', dy: 10, dx: 10, angle: -90 }}\n                        yAxisId={0}\n                        orientation=\"left\"\n                        stroke={'#908e95'}\n                        domain={[0, 100]}\n                        ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\n                        tick={{ fontSize: 11 }}\n                    />\n                }\n                {\n                    units.pressure &&\n                    <YAxis\n                        label={{ value: 'PSI', position: 'insideTopLeft', offset: 0, fill: '#908e8e', fontSize: 12, dy: 15, dx: 10, angle: -90 }}\n                        yAxisId={1}\n                        orientation=\"left\"\n                        stroke={'#908e8f'}\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={unitAdder}\n                    />\n                }\n                <Tooltip />\n            </LineChart>\n        </ResponsiveContainer>\n        </div>\n}\n\nexport default ChartGraph"]},"metadata":{},"sourceType":"module"}