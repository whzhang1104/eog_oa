{"ast":null,"code":"import _slicedToArray from \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/MetricSelector.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport { useQuery } from 'urql';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../Features/Metrics/reducer';\nvar query = \"\\n    query {\\n        getMetrics\\n    }\\n\";\n\nvar MetricSelector = function MetricSelector() {\n  var _useQuery = useQuery({\n    query: query\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var data = result.data,\n      error = result.error;\n\n  var onChange = function onChange(selected, action) {\n    var selectedMetrics = selected ? selected.map(function (item) {\n      return item.value;\n    }) : [];\n    dispatch(actions.metricNamesSelected({\n      selectedMetrics: selectedMetrics,\n      metricName: action.option && action.option.value\n    }));\n  };\n\n  useEffect(function () {\n    if (error) {\n      return;\n    }\n\n    if (!data) return;\n    var getMetrics = data.getMetrics;\n    setOptions(getMetrics.map(function (option) {\n      return {\n        label: option,\n        value: option\n      };\n    }));\n  }, [dispatch, data, error]);\n  return /*#__PURE__*/React.createElement(Select, {\n    name: \"metricSelect\",\n    options: options,\n    isMulti: true,\n    closeMenuOnSelect: false,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default MetricSelector;","map":{"version":3,"sources":["/Users/wenhanzhang/Desktop/oa test/eog/wenhan-eog-react-assessment/src/components/MetricSelector.tsx"],"names":["React","useState","useEffect","Select","useQuery","useDispatch","actions","query","MetricSelector","result","dispatch","options","setOptions","data","error","onChange","selected","action","selectedMetrics","map","item","value","metricNamesSelected","metricName","option","getMetrics","label"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAA2E,cAA3E;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,6BAAxB;AAEA,IAAMC,KAAK,+CAAX;;AAWA,IAAMC,cAAwB,GAAG,SAA3BA,cAA2B,GAAM;AACrC,kBAAiBJ,QAAQ,CAAC;AACxBG,IAAAA,KAAK,EAALA;AADwB,GAAD,CAAzB;AAAA;AAAA,MAAOE,MAAP;;AAGA,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AACA,kBAA8BJ,QAAQ,CAAsB,EAAtB,CAAtC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAQC,IAAR,GAAwBJ,MAAxB,CAAQI,IAAR;AAAA,MAAcC,KAAd,GAAwBL,MAAxB,CAAcK,KAAd;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAuCC,MAAvC,EAAsE;AACrF,QAAMC,eAAe,GAAGF,QAAQ,GAAGA,QAAQ,CAACG,GAAT,CAAa,UAACC,IAAD;AAAA,aAAkBA,IAAI,CAACC,KAAvB;AAAA,KAAb,CAAH,GAAgD,EAAhF;AACAX,IAAAA,QAAQ,CAACJ,OAAO,CAACgB,mBAAR,CAA4B;AAAEJ,MAAAA,eAAe,EAAfA,eAAF;AAAmBK,MAAAA,UAAU,EAAEN,MAAM,CAACO,MAAP,IAAiBP,MAAM,CAACO,MAAP,CAAcH;AAA9D,KAA5B,CAAD,CAAR;AACD,GAHD;;AAKAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,KAAJ,EAAW;AACT;AACD;;AACD,QAAI,CAACD,IAAL,EAAW;AACX,QAAQY,UAAR,GAAuBZ,IAAvB,CAAQY,UAAR;AACAb,IAAAA,UAAU,CAACa,UAAU,CAACN,GAAX,CAAe,UAACK,MAAD;AAAA,aAAqB;AAAEE,QAAAA,KAAK,EAAEF,MAAT;AAAiBH,QAAAA,KAAK,EAAEG;AAAxB,OAArB;AAAA,KAAf,CAAD,CAAV;AACD,GAPQ,EAON,CAACd,QAAD,EAAWG,IAAX,EAAiBC,KAAjB,CAPM,CAAT;AASA,sBAAO,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,cAAb;AAA4B,IAAA,OAAO,EAAEH,OAArC;AAA8C,IAAA,OAAO,MAArD;AAAsD,IAAA,iBAAiB,EAAE,KAAzE;AAAgF,IAAA,QAAQ,EAAEI,QAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvBD;;AAyBA,eAAeP,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select, { OptionTypeBase, OptionsType, ValueType, ActionMeta } from 'react-select';\nimport { useQuery } from 'urql';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../Features/Metrics/reducer';\n\nconst query = `\n    query {\n        getMetrics\n    }\n`;\n\ninterface Option extends OptionTypeBase {\n  label: string;\n  value: string;\n}\n\nconst MetricSelector: React.FC = () => {\n  const [result] = useQuery({\n    query,\n  });\n  const dispatch = useDispatch();\n  const [options, setOptions] = useState<OptionsType<Option>>([]);\n  const { data, error } = result;\n\n  const onChange = (selected: ValueType<Option, boolean>, action: ActionMeta<Option>) => {\n    const selectedMetrics = selected ? selected.map((item: Option) => item.value) : [];\n    dispatch(actions.metricNamesSelected({ selectedMetrics, metricName: action.option && action.option.value }));\n  };\n\n  useEffect(() => {\n    if (error) {\n      return;\n    }\n    if (!data) return;\n    const { getMetrics } = data;\n    setOptions(getMetrics.map((option: string) => ({ label: option, value: option })));\n  }, [dispatch, data, error]);\n\n  return <Select name=\"metricSelect\" options={options} isMulti closeMenuOnSelect={false} onChange={onChange} />;\n};\n\nexport default MetricSelector;\n"]},"metadata":{},"sourceType":"module"}